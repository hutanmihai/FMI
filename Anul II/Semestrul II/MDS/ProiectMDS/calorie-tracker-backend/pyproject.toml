[tool.poetry]
name = "calorie-tracker-backend"
version = "0.1.0"
description = ""
authors = ["mihaihutan <hutanmihai29@gmail.com>"]
readme = "README.md"
packages = [{ include = "app" }]


[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.93.0"
sqlalchemy = { version = "^2.0.5.post1", extras = ["asyncio"] }
asyncpg = "^0.27.0"
uvicorn = { version = "^0.20.0", extras = ["standard"] }
greenlet = "^2.0.2"
google-auth-oauthlib = "^1.0.0"
google-auth = "^2.16.3"
google-auth-httplib2 = "^0.1.0"
pyjwt = "^2.6.0"
pandas = "^2.0.0"
loguru = "^0.7.0"
sqlalchemy-utils = "^0.41.0"


[tool.poetry.group.dev.dependencies]
poethepoet = "^0.18.1"
alembic = "^1.10.2"
fourmat = "^0.11.1"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.2"
pytest-asyncio = "^0.20.3"
pytest-cov = "^4.0.0"
httpx = "^0.23.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
run_app = "app.app:run_app"

[tool.poe.tasks]

[tool.poe.tasks.clean]
# This task will be called by poe clean and it cleans all artifacts from previous tests
help = "Clean up the project"
cmd = """
    rm -rf .coverage && \
    rm -rf coverage.xml && \
    rm -rf htmlcov && \
    rm -rf .pytest_cache && \
    rm -rf ./**/__pycache__ && \
    rm -rf dist && \
    """

[tool.poe.tasks.clean_pycache]
# This task will be called by poe clean_pycache and it removes all __pycache__ folders
help = "Clean up the project of all __pycache__ folders"
cmd = """
    rm -rf ./**/__pycache__
    rm -rf .pytest_cache
    """


[tool.poe.tasks.build_image]
# This task will be called by poe build_image and it will build a docker image
help = "Build docker image"
cmd = "docker build -t app_image:$image_tag ."

[[tool.poe.tasks.build_image.args]]
# This argument will be passed to the build_image task and it will be used as a tag for the docker image
help = "Tag of the docker image"
name = "image_tag"
options = ["--tag"]
default = "latest"

[tool.poe.tasks.start_app]
# This task composes up the app using primary database
help = "Start the app"
cmd = "docker-compose up -d app "
envfile = "envs/dev.env"

[tool.poe.tasks.stop_app]
# This task composes down the app
help = "Stop the app"
cmd = "docker-compose down"
envfile = "envs/dev.env"

[tool.poe.tasks.start_test_db]
# This task composes up the test db
help = "Start the test db"
cmd = "docker-compose up -d test_db "

[tool.poe.tasks.pytest_api]
# This task will be called by poe pytest_api and it will run all tests for the API
help = "Run API tests"
cmd = "pytest app/tests --cov=app/tests --cov-report=$cov_type"

[[tool.poe.tasks.pytest_api.args]]
# This argument will be passed to the pytest_api task and if it is provided it will generate a coverage report in the specified format (html, xml, term)
help = "Generate coverage html or xml report"
name = "cov_type"
positional = true
required = false
default = "term"

[tool.poe.tasks.wait_for_db]
# This task will be called by poe wait_for_db and it will call sleep for the db to be ready
help = "Wait for the database to be ready"
cmd = "sleep 1"

[tool.poe.tasks.destroy_test_db]
# This task removes the test_db container
help = "Destroy the test db"
cmd = "docker-compose rm -svf test_db"

[tool.poe.tasks.test]
# This task will be called by poe api_test and it will first start the test db
# and then wait for it to be ready and then run all tests for the API and then clean up __pycache__ folders
# and remove test_db container.
help = "Run API tests in a new environment"
sequence = ["start_test_db", "wait_for_db", "pytest_api $cov_type", "clean_pycache", "destroy_test_db"]
envfile = "envs/test.env"

[[tool.poe.tasks.test.args]]
# This argument will be passed to the test task and if it is provided it will generate a coverage report in the specified format (html, xml, term)
help = "Generate coverage html or xml report"
name = "cov_type"
options = ["--cov-report"]
required = false

[tool.poe.tasks.create_migration]
# This task will create migration
help = "Create migration"
cmd = "alembic revision --autogenerate"
envfile = "envs/local.env"

[tool.poe.tasks.upgrade_schema]
# This task will upgrade the database schema
help = "Upgrade database schema"
cmd = "alembic upgrade head"
envfile = "envs/local.env"

[tool.poe.tasks.downgrade_schema]
# This task will upgrade the database schema
help = "Downgrade database schema"
cmd = "alembic downgrade head"
envfile = "envs/local.env"

[tool.poe.tasks.upgrade_schema_production]
# This task will upgrade the database schema on production db
help = "Upgrade database schema on production db"
cmd = "alembic upgrade head"
envfile = "envs/prod.env"
