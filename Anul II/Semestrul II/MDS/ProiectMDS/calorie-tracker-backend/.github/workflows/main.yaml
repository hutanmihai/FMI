name: BACKEND

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Black Check
        uses: jpetrucciani/black-check@23.1.0
        with:
          path: ./app/
  test:
    needs: linter
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_DB }}
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python 3.11.0
        uses: actions/setup-python@v3
        with:
          python-version: 3.11.0
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry export --without-hashes --format=requirements.txt --with "dev" --with "test" > requirements.txt
          pip install -r requirements.txt
      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          ADMIN_ID: ${{ secrets.ADMIN_ID }}
          ADMIN_G_ID: ${{ secrets.ADMIN_G_ID }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRETS }}
          APP_HOST: ${{ secrets.APP_HOST }}
          APP_PORT: ${{ secrets.APP_PORT }}
          DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_DB: ${{ secrets.DATABASE_DB }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        run: pytest --junitxml=reports/report_func.xml ./app/tests/
      - name: Save junit report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test_report
          path: ./reports/report_func.xml
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy using deploy hook
        uses: wei/curl@master
        with:
          args: ${{ secrets.RENDER_DEPLOY_HOOK }}
